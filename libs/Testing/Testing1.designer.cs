#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Testing
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="professor_testing")]
	public partial class TestingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertBattery(Battery instance);
    partial void UpdateBattery(Battery instance);
    partial void DeleteBattery(Battery instance);
    partial void InsertBatteryTest(BatteryTest instance);
    partial void UpdateBatteryTest(BatteryTest instance);
    partial void DeleteBatteryTest(BatteryTest instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertConseq(Conseq instance);
    partial void UpdateConseq(Conseq instance);
    partial void DeleteConseq(Conseq instance);
    partial void InsertInterpretRule(InterpretRule instance);
    partial void UpdateInterpretRule(InterpretRule instance);
    partial void DeleteInterpretRule(InterpretRule instance);
    partial void InsertInterpret(Interpret instance);
    partial void UpdateInterpret(Interpret instance);
    partial void DeleteInterpret(Interpret instance);
    partial void InsertQuestType(QuestType instance);
    partial void UpdateQuestType(QuestType instance);
    partial void DeleteQuestType(QuestType instance);
    partial void InsertScaleWeight(ScaleWeight instance);
    partial void UpdateScaleWeight(ScaleWeight instance);
    partial void DeleteScaleWeight(ScaleWeight instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertScales(Scales instance);
    partial void UpdateScales(Scales instance);
    partial void DeleteScales(Scales instance);
    #endregion
		
		public TestingDataContext() : 
				base(global::Testing.Properties.Settings.Default.Serverprofessor_testingConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Battery> Batteries
		{
			get
			{
				return this.GetTable<Battery>();
			}
		}
		
		public System.Data.Linq.Table<BatteryTest> BatteryTests
		{
			get
			{
				return this.GetTable<BatteryTest>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Conseq> Conseqs
		{
			get
			{
				return this.GetTable<Conseq>();
			}
		}
		
		public System.Data.Linq.Table<InterpretRule> InterpretRules
		{
			get
			{
				return this.GetTable<InterpretRule>();
			}
		}
		
		public System.Data.Linq.Table<Interpret> Interprets
		{
			get
			{
				return this.GetTable<Interpret>();
			}
		}
		
		public System.Data.Linq.Table<QuestType> QuestTypes
		{
			get
			{
				return this.GetTable<QuestType>();
			}
		}
		
		public System.Data.Linq.Table<ScaleWeight> ScaleWeights
		{
			get
			{
				return this.GetTable<ScaleWeight>();
			}
		}
		
		public System.Data.Linq.Table<BatteriesView> BatteriesViews
		{
			get
			{
				return this.GetTable<BatteriesView>();
			}
		}
		
		public System.Data.Linq.Table<TestsView> TestsViews
		{
			get
			{
				return this.GetTable<TestsView>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Scales> Scales
		{
			get
			{
				return this.GetTable<Scales>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Answers")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnsID;
		
		private int _QuestID;
		
		private System.Nullable<int> _AnsNum;
		
		private string _AnsText;
		
		private System.Nullable<int> _NextQuestNum;
		
		private EntitySet<ScaleWeight> _ScaleWeights;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnsIDChanging(int value);
    partial void OnAnsIDChanged();
    partial void OnQuestIDChanging(int value);
    partial void OnQuestIDChanged();
    partial void OnAnsNumChanging(System.Nullable<int> value);
    partial void OnAnsNumChanged();
    partial void OnAnsTextChanging(string value);
    partial void OnAnsTextChanged();
    partial void OnNextQuestNumChanging(System.Nullable<int> value);
    partial void OnNextQuestNumChanged();
    #endregion
		
		public Answer()
		{
			this._ScaleWeights = new EntitySet<ScaleWeight>(new Action<ScaleWeight>(this.attach_ScaleWeights), new Action<ScaleWeight>(this.detach_ScaleWeights));
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AnsID
		{
			get
			{
				return this._AnsID;
			}
			set
			{
				if ((this._AnsID != value))
				{
					this.OnAnsIDChanging(value);
					this.SendPropertyChanging();
					this._AnsID = value;
					this.SendPropertyChanged("AnsID");
					this.OnAnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestID", DbType="Int NOT NULL")]
		public int QuestID
		{
			get
			{
				return this._QuestID;
			}
			set
			{
				if ((this._QuestID != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestIDChanging(value);
					this.SendPropertyChanging();
					this._QuestID = value;
					this.SendPropertyChanged("QuestID");
					this.OnQuestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsNum", DbType="Int")]
		public System.Nullable<int> AnsNum
		{
			get
			{
				return this._AnsNum;
			}
			set
			{
				if ((this._AnsNum != value))
				{
					this.OnAnsNumChanging(value);
					this.SendPropertyChanging();
					this._AnsNum = value;
					this.SendPropertyChanged("AnsNum");
					this.OnAnsNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsText", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string AnsText
		{
			get
			{
				return this._AnsText;
			}
			set
			{
				if ((this._AnsText != value))
				{
					this.OnAnsTextChanging(value);
					this.SendPropertyChanging();
					this._AnsText = value;
					this.SendPropertyChanged("AnsText");
					this.OnAnsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextQuestNum", DbType="Int")]
		public System.Nullable<int> NextQuestNum
		{
			get
			{
				return this._NextQuestNum;
			}
			set
			{
				if ((this._NextQuestNum != value))
				{
					this.OnNextQuestNumChanging(value);
					this.SendPropertyChanging();
					this._NextQuestNum = value;
					this.SendPropertyChanged("NextQuestNum");
					this.OnNextQuestNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_ScaleWeight", Storage="_ScaleWeights", ThisKey="AnsID", OtherKey="AnsID")]
		public EntitySet<ScaleWeight> ScaleWeights
		{
			get
			{
				return this._ScaleWeights;
			}
			set
			{
				this._ScaleWeights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Question", ThisKey="QuestID", OtherKey="QuestID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestID = value.QuestID;
					}
					else
					{
						this._QuestID = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScaleWeights(ScaleWeight entity)
		{
			this.SendPropertyChanging();
			entity.Answer = this;
		}
		
		private void detach_ScaleWeights(ScaleWeight entity)
		{
			this.SendPropertyChanging();
			entity.Answer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Batteries")]
	public partial class Battery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BatteryID;
		
		private string _BatteryName;
		
		private string _Description;
		
		private EntitySet<BatteryTest> _BatteryTests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatteryIDChanging(int value);
    partial void OnBatteryIDChanged();
    partial void OnBatteryNameChanging(string value);
    partial void OnBatteryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Battery()
		{
			this._BatteryTests = new EntitySet<BatteryTest>(new Action<BatteryTest>(this.attach_BatteryTests), new Action<BatteryTest>(this.detach_BatteryTests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BatteryID
		{
			get
			{
				return this._BatteryID;
			}
			set
			{
				if ((this._BatteryID != value))
				{
					this.OnBatteryIDChanging(value);
					this.SendPropertyChanging();
					this._BatteryID = value;
					this.SendPropertyChanged("BatteryID");
					this.OnBatteryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryName", DbType="NVarChar(10)")]
		public string BatteryName
		{
			get
			{
				return this._BatteryName;
			}
			set
			{
				if ((this._BatteryName != value))
				{
					this.OnBatteryNameChanging(value);
					this.SendPropertyChanging();
					this._BatteryName = value;
					this.SendPropertyChanged("BatteryName");
					this.OnBatteryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Battery_BatteryTest", Storage="_BatteryTests", ThisKey="BatteryID", OtherKey="BatteryID")]
		public EntitySet<BatteryTest> BatteryTests
		{
			get
			{
				return this._BatteryTests;
			}
			set
			{
				this._BatteryTests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatteryTests(BatteryTest entity)
		{
			this.SendPropertyChanging();
			entity.Battery = this;
		}
		
		private void detach_BatteryTests(BatteryTest entity)
		{
			this.SendPropertyChanging();
			entity.Battery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatteryTests")]
	public partial class BatteryTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BatteryTestID;
		
		private int _BatteryID;
		
		private int _TestID;
		
		private int _Number;
		
		private EntityRef<Battery> _Battery;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatteryTestIDChanging(int value);
    partial void OnBatteryTestIDChanged();
    partial void OnBatteryIDChanging(int value);
    partial void OnBatteryIDChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    #endregion
		
		public BatteryTest()
		{
			this._Battery = default(EntityRef<Battery>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryTestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BatteryTestID
		{
			get
			{
				return this._BatteryTestID;
			}
			set
			{
				if ((this._BatteryTestID != value))
				{
					this.OnBatteryTestIDChanging(value);
					this.SendPropertyChanging();
					this._BatteryTestID = value;
					this.SendPropertyChanged("BatteryTestID");
					this.OnBatteryTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryID", DbType="Int NOT NULL")]
		public int BatteryID
		{
			get
			{
				return this._BatteryID;
			}
			set
			{
				if ((this._BatteryID != value))
				{
					if (this._Battery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatteryIDChanging(value);
					this.SendPropertyChanging();
					this._BatteryID = value;
					this.SendPropertyChanged("BatteryID");
					this.OnBatteryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Battery_BatteryTest", Storage="_Battery", ThisKey="BatteryID", OtherKey="BatteryID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Battery Battery
		{
			get
			{
				return this._Battery.Entity;
			}
			set
			{
				Battery previousValue = this._Battery.Entity;
				if (((previousValue != value) 
							|| (this._Battery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Battery.Entity = null;
						previousValue.BatteryTests.Remove(this);
					}
					this._Battery.Entity = value;
					if ((value != null))
					{
						value.BatteryTests.Add(this);
						this._BatteryID = value.BatteryID;
					}
					else
					{
						this._BatteryID = default(int);
					}
					this.SendPropertyChanged("Battery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_BatteryTest", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.BatteryTests.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.BatteryTests.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private EntitySet<Test> _Tests;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Category()
		{
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Test", Storage="_Tests", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conseqs")]
	public partial class Conseq : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConseqID;
		
		private int _RuleID;
		
		private string _ConseqText;
		
		private System.Nullable<int> _TXT_TXT_N;
		
		private EntityRef<InterpretRule> _InterpretRule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConseqIDChanging(int value);
    partial void OnConseqIDChanged();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnConseqTextChanging(string value);
    partial void OnConseqTextChanged();
    partial void OnTXT_TXT_NChanging(System.Nullable<int> value);
    partial void OnTXT_TXT_NChanged();
    #endregion
		
		public Conseq()
		{
			this._InterpretRule = default(EntityRef<InterpretRule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConseqID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ConseqID
		{
			get
			{
				return this._ConseqID;
			}
			set
			{
				if ((this._ConseqID != value))
				{
					this.OnConseqIDChanging(value);
					this.SendPropertyChanging();
					this._ConseqID = value;
					this.SendPropertyChanged("ConseqID");
					this.OnConseqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL")]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					if (this._InterpretRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConseqText", DbType="NVarChar(1200)")]
		public string ConseqText
		{
			get
			{
				return this._ConseqText;
			}
			set
			{
				if ((this._ConseqText != value))
				{
					this.OnConseqTextChanging(value);
					this.SendPropertyChanging();
					this._ConseqText = value;
					this.SendPropertyChanged("ConseqText");
					this.OnConseqTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TXT_TXT_N", DbType="Int")]
		public System.Nullable<int> TXT_TXT_N
		{
			get
			{
				return this._TXT_TXT_N;
			}
			set
			{
				if ((this._TXT_TXT_N != value))
				{
					this.OnTXT_TXT_NChanging(value);
					this.SendPropertyChanging();
					this._TXT_TXT_N = value;
					this.SendPropertyChanged("TXT_TXT_N");
					this.OnTXT_TXT_NChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InterpretRule_Conseq", Storage="_InterpretRule", ThisKey="RuleID", OtherKey="RuleID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public InterpretRule InterpretRule
		{
			get
			{
				return this._InterpretRule.Entity;
			}
			set
			{
				InterpretRule previousValue = this._InterpretRule.Entity;
				if (((previousValue != value) 
							|| (this._InterpretRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InterpretRule.Entity = null;
						previousValue.Conseqs.Remove(this);
					}
					this._InterpretRule.Entity = value;
					if ((value != null))
					{
						value.Conseqs.Add(this);
						this._RuleID = value.RuleID;
					}
					else
					{
						this._RuleID = default(int);
					}
					this.SendPropertyChanged("InterpretRule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InterpretRules")]
	public partial class InterpretRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleID;
		
		private int _InterpretID;
		
		private string _RuleText;
		
		private System.Nullable<int> _CON_TXT_N;
		
		private EntitySet<Conseq> _Conseqs;
		
		private EntityRef<Interpret> _Interpret;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIDChanging(int value);
    partial void OnRuleIDChanged();
    partial void OnInterpretIDChanging(int value);
    partial void OnInterpretIDChanged();
    partial void OnRuleTextChanging(string value);
    partial void OnRuleTextChanged();
    partial void OnCON_TXT_NChanging(System.Nullable<int> value);
    partial void OnCON_TXT_NChanged();
    #endregion
		
		public InterpretRule()
		{
			this._Conseqs = new EntitySet<Conseq>(new Action<Conseq>(this.attach_Conseqs), new Action<Conseq>(this.detach_Conseqs));
			this._Interpret = default(EntityRef<Interpret>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RuleID
		{
			get
			{
				return this._RuleID;
			}
			set
			{
				if ((this._RuleID != value))
				{
					this.OnRuleIDChanging(value);
					this.SendPropertyChanging();
					this._RuleID = value;
					this.SendPropertyChanged("RuleID");
					this.OnRuleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterpretID", DbType="Int NOT NULL")]
		public int InterpretID
		{
			get
			{
				return this._InterpretID;
			}
			set
			{
				if ((this._InterpretID != value))
				{
					if (this._Interpret.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInterpretIDChanging(value);
					this.SendPropertyChanging();
					this._InterpretID = value;
					this.SendPropertyChanged("InterpretID");
					this.OnInterpretIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleText", DbType="NVarChar(150)")]
		public string RuleText
		{
			get
			{
				return this._RuleText;
			}
			set
			{
				if ((this._RuleText != value))
				{
					this.OnRuleTextChanging(value);
					this.SendPropertyChanging();
					this._RuleText = value;
					this.SendPropertyChanged("RuleText");
					this.OnRuleTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CON_TXT_N", DbType="Int")]
		public System.Nullable<int> CON_TXT_N
		{
			get
			{
				return this._CON_TXT_N;
			}
			set
			{
				if ((this._CON_TXT_N != value))
				{
					this.OnCON_TXT_NChanging(value);
					this.SendPropertyChanging();
					this._CON_TXT_N = value;
					this.SendPropertyChanged("CON_TXT_N");
					this.OnCON_TXT_NChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InterpretRule_Conseq", Storage="_Conseqs", ThisKey="RuleID", OtherKey="RuleID")]
		public EntitySet<Conseq> Conseqs
		{
			get
			{
				return this._Conseqs;
			}
			set
			{
				this._Conseqs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Interpret_InterpretRule", Storage="_Interpret", ThisKey="InterpretID", OtherKey="InterpretID", IsForeignKey=true)]
		public Interpret Interpret
		{
			get
			{
				return this._Interpret.Entity;
			}
			set
			{
				Interpret previousValue = this._Interpret.Entity;
				if (((previousValue != value) 
							|| (this._Interpret.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Interpret.Entity = null;
						previousValue.InterpretRules.Remove(this);
					}
					this._Interpret.Entity = value;
					if ((value != null))
					{
						value.InterpretRules.Add(this);
						this._InterpretID = value.InterpretID;
					}
					else
					{
						this._InterpretID = default(int);
					}
					this.SendPropertyChanged("Interpret");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Conseqs(Conseq entity)
		{
			this.SendPropertyChanging();
			entity.InterpretRule = this;
		}
		
		private void detach_Conseqs(Conseq entity)
		{
			this.SendPropertyChanging();
			entity.InterpretRule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interprets")]
	public partial class Interpret : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InterpretID;
		
		private string _InterpretName;
		
		private string _InterpretShortName;
		
		private EntitySet<InterpretRule> _InterpretRules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInterpretIDChanging(int value);
    partial void OnInterpretIDChanged();
    partial void OnInterpretNameChanging(string value);
    partial void OnInterpretNameChanged();
    partial void OnInterpretShortNameChanging(string value);
    partial void OnInterpretShortNameChanged();
    #endregion
		
		public Interpret()
		{
			this._InterpretRules = new EntitySet<InterpretRule>(new Action<InterpretRule>(this.attach_InterpretRules), new Action<InterpretRule>(this.detach_InterpretRules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterpretID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int InterpretID
		{
			get
			{
				return this._InterpretID;
			}
			set
			{
				if ((this._InterpretID != value))
				{
					this.OnInterpretIDChanging(value);
					this.SendPropertyChanging();
					this._InterpretID = value;
					this.SendPropertyChanged("InterpretID");
					this.OnInterpretIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterpretName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string InterpretName
		{
			get
			{
				return this._InterpretName;
			}
			set
			{
				if ((this._InterpretName != value))
				{
					this.OnInterpretNameChanging(value);
					this.SendPropertyChanging();
					this._InterpretName = value;
					this.SendPropertyChanged("InterpretName");
					this.OnInterpretNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterpretShortName", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string InterpretShortName
		{
			get
			{
				return this._InterpretShortName;
			}
			set
			{
				if ((this._InterpretShortName != value))
				{
					this.OnInterpretShortNameChanging(value);
					this.SendPropertyChanging();
					this._InterpretShortName = value;
					this.SendPropertyChanged("InterpretShortName");
					this.OnInterpretShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Interpret_InterpretRule", Storage="_InterpretRules", ThisKey="InterpretID", OtherKey="InterpretID")]
		public EntitySet<InterpretRule> InterpretRules
		{
			get
			{
				return this._InterpretRules;
			}
			set
			{
				this._InterpretRules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InterpretRules(InterpretRule entity)
		{
			this.SendPropertyChanging();
			entity.Interpret = this;
		}
		
		private void detach_InterpretRules(InterpretRule entity)
		{
			this.SendPropertyChanging();
			entity.Interpret = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestTypes")]
	public partial class QuestType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestTypeID;
		
		private string _TypeName;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestTypeIDChanging(int value);
    partial void OnQuestTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public QuestType()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestTypeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestTypeID
		{
			get
			{
				return this._QuestTypeID;
			}
			set
			{
				if ((this._QuestTypeID != value))
				{
					this.OnQuestTypeIDChanging(value);
					this.SendPropertyChanging();
					this._QuestTypeID = value;
					this.SendPropertyChanged("QuestTypeID");
					this.OnQuestTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestType_Question", Storage="_Questions", ThisKey="QuestTypeID", OtherKey="QuestType")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestType1 = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScaleWeights")]
	public partial class ScaleWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScaleWeightID;
		
		private System.Nullable<int> _AnsID;
		
		private System.Nullable<int> _ScaleID;
		
		private System.Nullable<double> _Weight;
		
		private EntityRef<Answer> _Answer;
		
		private EntityRef<Scales> _Scales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScaleWeightIDChanging(int value);
    partial void OnScaleWeightIDChanged();
    partial void OnAnsIDChanging(System.Nullable<int> value);
    partial void OnAnsIDChanged();
    partial void OnScaleIDChanging(System.Nullable<int> value);
    partial void OnScaleIDChanged();
    partial void OnWeightChanging(System.Nullable<double> value);
    partial void OnWeightChanged();
    #endregion
		
		public ScaleWeight()
		{
			this._Answer = default(EntityRef<Answer>);
			this._Scales = default(EntityRef<Scales>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleWeightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScaleWeightID
		{
			get
			{
				return this._ScaleWeightID;
			}
			set
			{
				if ((this._ScaleWeightID != value))
				{
					this.OnScaleWeightIDChanging(value);
					this.SendPropertyChanging();
					this._ScaleWeightID = value;
					this.SendPropertyChanged("ScaleWeightID");
					this.OnScaleWeightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnsID", DbType="Int")]
		public System.Nullable<int> AnsID
		{
			get
			{
				return this._AnsID;
			}
			set
			{
				if ((this._AnsID != value))
				{
					if (this._Answer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnsIDChanging(value);
					this.SendPropertyChanging();
					this._AnsID = value;
					this.SendPropertyChanged("AnsID");
					this.OnAnsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleID", DbType="Int")]
		public System.Nullable<int> ScaleID
		{
			get
			{
				return this._ScaleID;
			}
			set
			{
				if ((this._ScaleID != value))
				{
					if (this._Scales.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScaleIDChanging(value);
					this.SendPropertyChanging();
					this._ScaleID = value;
					this.SendPropertyChanged("ScaleID");
					this.OnScaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Float")]
		public System.Nullable<double> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Answer_ScaleWeight", Storage="_Answer", ThisKey="AnsID", OtherKey="AnsID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Answer Answer
		{
			get
			{
				return this._Answer.Entity;
			}
			set
			{
				Answer previousValue = this._Answer.Entity;
				if (((previousValue != value) 
							|| (this._Answer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Answer.Entity = null;
						previousValue.ScaleWeights.Remove(this);
					}
					this._Answer.Entity = value;
					if ((value != null))
					{
						value.ScaleWeights.Add(this);
						this._AnsID = value.AnsID;
					}
					else
					{
						this._AnsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Answer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scales_ScaleWeight", Storage="_Scales", ThisKey="ScaleID", OtherKey="ScaleID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Scales Scales
		{
			get
			{
				return this._Scales.Entity;
			}
			set
			{
				Scales previousValue = this._Scales.Entity;
				if (((previousValue != value) 
							|| (this._Scales.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Scales.Entity = null;
						previousValue.ScaleWeight.Remove(this);
					}
					this._Scales.Entity = value;
					if ((value != null))
					{
						value.ScaleWeight.Add(this);
						this._ScaleID = value.ScaleID;
					}
					else
					{
						this._ScaleID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Scales");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatteriesView")]
	public partial class BatteriesView
	{
		
		private int _BatteryID;
		
		private string _BatteryName;
		
		private string _Description;
		
		private string _BatteryTests;
		
		public BatteriesView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryID", DbType="Int NOT NULL")]
		public int BatteryID
		{
			get
			{
				return this._BatteryID;
			}
			set
			{
				if ((this._BatteryID != value))
				{
					this._BatteryID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryName", DbType="NVarChar(10)")]
		public string BatteryName
		{
			get
			{
				return this._BatteryName;
			}
			set
			{
				if ((this._BatteryName != value))
				{
					this._BatteryName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryTests", DbType="NVarChar(100)")]
		public string BatteryTests
		{
			get
			{
				return this._BatteryTests;
			}
			set
			{
				if ((this._BatteryTests != value))
				{
					this._BatteryTests = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestsView")]
	public partial class TestsView
	{
		
		private int _TestID;
		
		private string _ShortName;
		
		private string _Name;
		
		public TestsView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this._TestID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this._ShortName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestID;
		
		private string _ShortName;
		
		private string _FullName;
		
		private int _CategoryID;
		
		private string _Author;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Description;
		
		private int _TestingCount;
		
		private string _Preamble;
		
		private bool _HorisontalAnswers;
		
		private EntitySet<BatteryTest> _BatteryTests;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<Scales> _Scales;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTestingCountChanging(int value);
    partial void OnTestingCountChanged();
    partial void OnPreambleChanging(string value);
    partial void OnPreambleChanged();
    partial void OnHorisontalAnswersChanging(bool value);
    partial void OnHorisontalAnswersChanged();
    #endregion
		
		public Test()
		{
			this._BatteryTests = new EntitySet<BatteryTest>(new Action<BatteryTest>(this.attach_BatteryTests), new Action<BatteryTest>(this.detach_BatteryTests));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Scales = new EntitySet<Scales>(new Action<Scales>(this.attach_Scales), new Action<Scales>(this.detach_Scales));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(50)")]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestingCount", DbType="Int NOT NULL")]
		public int TestingCount
		{
			get
			{
				return this._TestingCount;
			}
			set
			{
				if ((this._TestingCount != value))
				{
					this.OnTestingCountChanging(value);
					this.SendPropertyChanging();
					this._TestingCount = value;
					this.SendPropertyChanged("TestingCount");
					this.OnTestingCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preamble", DbType="NVarChar(50)")]
		public string Preamble
		{
			get
			{
				return this._Preamble;
			}
			set
			{
				if ((this._Preamble != value))
				{
					this.OnPreambleChanging(value);
					this.SendPropertyChanging();
					this._Preamble = value;
					this.SendPropertyChanged("Preamble");
					this.OnPreambleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorisontalAnswers", DbType="Bit NOT NULL")]
		public bool HorisontalAnswers
		{
			get
			{
				return this._HorisontalAnswers;
			}
			set
			{
				if ((this._HorisontalAnswers != value))
				{
					this.OnHorisontalAnswersChanging(value);
					this.SendPropertyChanging();
					this._HorisontalAnswers = value;
					this.SendPropertyChanged("HorisontalAnswers");
					this.OnHorisontalAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_BatteryTest", Storage="_BatteryTests", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<BatteryTest> BatteryTests
		{
			get
			{
				return this._BatteryTests;
			}
			set
			{
				this._BatteryTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Question", Storage="_Questions", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Scales", Storage="_Scales", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<Scales> Scales
		{
			get
			{
				return this._Scales;
			}
			set
			{
				this._Scales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Test", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatteryTests(BatteryTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_BatteryTests(BatteryTest entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_Scales(Scales entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_Scales(Scales entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestID;
		
		private int _TestID;
		
		private string _QuestText;
		
		private int _QuestType;
		
		private System.Nullable<int> _QuestNum;
		
		private System.Data.Linq.Binary _QuestImg;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<QuestType> _QuestType1;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestIDChanging(int value);
    partial void OnQuestIDChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnQuestTextChanging(string value);
    partial void OnQuestTextChanged();
    partial void OnQuestTypeChanging(int value);
    partial void OnQuestTypeChanged();
    partial void OnQuestNumChanging(System.Nullable<int> value);
    partial void OnQuestNumChanged();
    partial void OnQuestImgChanging(System.Data.Linq.Binary value);
    partial void OnQuestImgChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._QuestType1 = default(EntityRef<QuestType>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int QuestID
		{
			get
			{
				return this._QuestID;
			}
			set
			{
				if ((this._QuestID != value))
				{
					this.OnQuestIDChanging(value);
					this.SendPropertyChanging();
					this._QuestID = value;
					this.SendPropertyChanged("QuestID");
					this.OnQuestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestText", DbType="NVarChar(240) NOT NULL", CanBeNull=false)]
		public string QuestText
		{
			get
			{
				return this._QuestText;
			}
			set
			{
				if ((this._QuestText != value))
				{
					this.OnQuestTextChanging(value);
					this.SendPropertyChanging();
					this._QuestText = value;
					this.SendPropertyChanged("QuestText");
					this.OnQuestTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestType", DbType="Int NOT NULL")]
		public int QuestType
		{
			get
			{
				return this._QuestType;
			}
			set
			{
				if ((this._QuestType != value))
				{
					if (this._QuestType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestTypeChanging(value);
					this.SendPropertyChanging();
					this._QuestType = value;
					this.SendPropertyChanged("QuestType");
					this.OnQuestTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestNum", DbType="Int")]
		public System.Nullable<int> QuestNum
		{
			get
			{
				return this._QuestNum;
			}
			set
			{
				if ((this._QuestNum != value))
				{
					this.OnQuestNumChanging(value);
					this.SendPropertyChanging();
					this._QuestNum = value;
					this.SendPropertyChanged("QuestNum");
					this.OnQuestNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestImg", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary QuestImg
		{
			get
			{
				return this._QuestImg;
			}
			set
			{
				if ((this._QuestImg != value))
				{
					this.OnQuestImgChanging(value);
					this.SendPropertyChanging();
					this._QuestImg = value;
					this.SendPropertyChanged("QuestImg");
					this.OnQuestImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Answer", Storage="_Answers", ThisKey="QuestID", OtherKey="QuestID")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestType_Question", Storage="_QuestType1", ThisKey="QuestType", OtherKey="QuestTypeID", IsForeignKey=true)]
		public QuestType QuestType1
		{
			get
			{
				return this._QuestType1.Entity;
			}
			set
			{
				QuestType previousValue = this._QuestType1.Entity;
				if (((previousValue != value) 
							|| (this._QuestType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestType1.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestType1.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._QuestType = value.QuestTypeID;
					}
					else
					{
						this._QuestType = default(int);
					}
					this.SendPropertyChanged("QuestType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Question", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scales")]
	public partial class Scales : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScaleID;
		
		private string _ScaleName;
		
		private string _ScaleShortName;
		
		private int _TestID;
		
		private System.Nullable<double> _BallAVR;
		
		private System.Nullable<double> _BallMin;
		
		private System.Nullable<double> _BallMax;
		
		private System.Nullable<double> _BallSTD;
		
		private System.Nullable<double> _Point0;
		
		private System.Nullable<double> _Point1;
		
		private System.Nullable<double> _Point2;
		
		private System.Nullable<double> _Point3;
		
		private System.Nullable<double> _Point4;
		
		private EntitySet<ScaleWeight> _ScaleWeight;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScaleIDChanging(int value);
    partial void OnScaleIDChanged();
    partial void OnScaleNameChanging(string value);
    partial void OnScaleNameChanged();
    partial void OnScaleShortNameChanging(string value);
    partial void OnScaleShortNameChanged();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnBallAVRChanging(System.Nullable<double> value);
    partial void OnBallAVRChanged();
    partial void OnBallMinChanging(System.Nullable<double> value);
    partial void OnBallMinChanged();
    partial void OnBallMaxChanging(System.Nullable<double> value);
    partial void OnBallMaxChanged();
    partial void OnBallSTDChanging(System.Nullable<double> value);
    partial void OnBallSTDChanged();
    partial void OnPoint0Changing(System.Nullable<double> value);
    partial void OnPoint0Changed();
    partial void OnPoint1Changing(System.Nullable<double> value);
    partial void OnPoint1Changed();
    partial void OnPoint2Changing(System.Nullable<double> value);
    partial void OnPoint2Changed();
    partial void OnPoint3Changing(System.Nullable<double> value);
    partial void OnPoint3Changed();
    partial void OnPoint4Changing(System.Nullable<double> value);
    partial void OnPoint4Changed();
    #endregion
		
		public Scales()
		{
			this._ScaleWeight = new EntitySet<ScaleWeight>(new Action<ScaleWeight>(this.attach_ScaleWeight), new Action<ScaleWeight>(this.detach_ScaleWeight));
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScaleID
		{
			get
			{
				return this._ScaleID;
			}
			set
			{
				if ((this._ScaleID != value))
				{
					this.OnScaleIDChanging(value);
					this.SendPropertyChanging();
					this._ScaleID = value;
					this.SendPropertyChanged("ScaleID");
					this.OnScaleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleName", DbType="NVarChar(20)")]
		public string ScaleName
		{
			get
			{
				return this._ScaleName;
			}
			set
			{
				if ((this._ScaleName != value))
				{
					this.OnScaleNameChanging(value);
					this.SendPropertyChanging();
					this._ScaleName = value;
					this.SendPropertyChanged("ScaleName");
					this.OnScaleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaleShortName", DbType="NVarChar(2)")]
		public string ScaleShortName
		{
			get
			{
				return this._ScaleShortName;
			}
			set
			{
				if ((this._ScaleShortName != value))
				{
					this.OnScaleShortNameChanging(value);
					this.SendPropertyChanging();
					this._ScaleShortName = value;
					this.SendPropertyChanged("ScaleShortName");
					this.OnScaleShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int NOT NULL")]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallAVR", DbType="Float")]
		public System.Nullable<double> BallAVR
		{
			get
			{
				return this._BallAVR;
			}
			set
			{
				if ((this._BallAVR != value))
				{
					this.OnBallAVRChanging(value);
					this.SendPropertyChanging();
					this._BallAVR = value;
					this.SendPropertyChanged("BallAVR");
					this.OnBallAVRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallMin", DbType="Float")]
		public System.Nullable<double> BallMin
		{
			get
			{
				return this._BallMin;
			}
			set
			{
				if ((this._BallMin != value))
				{
					this.OnBallMinChanging(value);
					this.SendPropertyChanging();
					this._BallMin = value;
					this.SendPropertyChanged("BallMin");
					this.OnBallMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallMax", DbType="Float")]
		public System.Nullable<double> BallMax
		{
			get
			{
				return this._BallMax;
			}
			set
			{
				if ((this._BallMax != value))
				{
					this.OnBallMaxChanging(value);
					this.SendPropertyChanging();
					this._BallMax = value;
					this.SendPropertyChanged("BallMax");
					this.OnBallMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BallSTD", DbType="Float")]
		public System.Nullable<double> BallSTD
		{
			get
			{
				return this._BallSTD;
			}
			set
			{
				if ((this._BallSTD != value))
				{
					this.OnBallSTDChanging(value);
					this.SendPropertyChanging();
					this._BallSTD = value;
					this.SendPropertyChanged("BallSTD");
					this.OnBallSTDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point0", DbType="Float")]
		public System.Nullable<double> Point0
		{
			get
			{
				return this._Point0;
			}
			set
			{
				if ((this._Point0 != value))
				{
					this.OnPoint0Changing(value);
					this.SendPropertyChanging();
					this._Point0 = value;
					this.SendPropertyChanged("Point0");
					this.OnPoint0Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point1", DbType="Float")]
		public System.Nullable<double> Point1
		{
			get
			{
				return this._Point1;
			}
			set
			{
				if ((this._Point1 != value))
				{
					this.OnPoint1Changing(value);
					this.SendPropertyChanging();
					this._Point1 = value;
					this.SendPropertyChanged("Point1");
					this.OnPoint1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point2", DbType="Float")]
		public System.Nullable<double> Point2
		{
			get
			{
				return this._Point2;
			}
			set
			{
				if ((this._Point2 != value))
				{
					this.OnPoint2Changing(value);
					this.SendPropertyChanging();
					this._Point2 = value;
					this.SendPropertyChanged("Point2");
					this.OnPoint2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point3", DbType="Float")]
		public System.Nullable<double> Point3
		{
			get
			{
				return this._Point3;
			}
			set
			{
				if ((this._Point3 != value))
				{
					this.OnPoint3Changing(value);
					this.SendPropertyChanging();
					this._Point3 = value;
					this.SendPropertyChanged("Point3");
					this.OnPoint3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Point4", DbType="Float")]
		public System.Nullable<double> Point4
		{
			get
			{
				return this._Point4;
			}
			set
			{
				if ((this._Point4 != value))
				{
					this.OnPoint4Changing(value);
					this.SendPropertyChanging();
					this._Point4 = value;
					this.SendPropertyChanged("Point4");
					this.OnPoint4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Scales_ScaleWeight", Storage="_ScaleWeight", ThisKey="ScaleID", OtherKey="ScaleID")]
		public EntitySet<ScaleWeight> ScaleWeight
		{
			get
			{
				return this._ScaleWeight;
			}
			set
			{
				this._ScaleWeight.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_Scales", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.Scales.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.Scales.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(int);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScaleWeight(ScaleWeight entity)
		{
			this.SendPropertyChanging();
			entity.Scales = this;
		}
		
		private void detach_ScaleWeight(ScaleWeight entity)
		{
			this.SendPropertyChanging();
			entity.Scales = null;
		}
	}
}
#pragma warning restore 1591
